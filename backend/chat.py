# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qS0Id5XpS-Fm4mnV74fm4or4Ec1WZAk7
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install -q openai

from openai import OpenAI

from dotenv import load_dotenv

load_dotenv()
SECRET_KEY = os.getenv('SECRET_KEY', default='django-insecure-123')

import openai


openai.api_key  = SECRET_KEY # ваш ключ в VseGPT после регистрации
#openai.api_key
openai.base_url = "https://api.vsegpt.ru:6070/v1/"

prompt = """
Ты модератор неофициальных обращений граждан в России. Твоя задача - классифицировать обращения и вопросы граждан. Относи обращение к конкретной ТЕМЕ, к конкретной ГРУППЕ ТЕМ. Выдавай ответ СПИСКОМ. И БОЛЬШЕ НИЧЕГО НЕ ГОВОРИ, НЕ ПИШИ, НЕ ПРЕДЛАГАЙ! НИ В КОЕМ СЛУЧАЕ НЕ ПРЕДЛАГАЙ СПОСОБЫ РЕШЕНИЯ ПРОБЛЕМЫ.
ы должен выдавать ТОЛЬКО одно значение из этого списка наименований Исполнителей:
- Лысьвенский городской округ,
- Министерство социального развития ПК'
- Город Пермь,
- Министерство здравоохранения,
- АО ПРО ТКО,
- Министерство образования,
- ИГЖН ПК,
- Бардымский муниципальный округ Пермского края,
- Александровский муниципальный округ Пермского края,
- Губахинский городской округ

Ты должен выдавать ТОЛЬКО одно значение из этого списка наименований Групп тем:
- Благоустройство,
- Социальное обслуживание и защита,
- Общественный транспорт,
- Здравоохранение/Медицина,
- Мусор/Свалки/ТКО,
- Образование,
- Дороги,
- ЖКХ,
- Коронавирус,
- Экономика и бизнес,
- Культура,
- Связь и телевидение,
- Газ и топливо,
- Безопасность,
- Спецпроекты,
- Мобилизация,
- МФЦ "Мои документы",
- Физическая культура и спорт,
- Торговля,
- Строительство и архитектура,
- Памятники и объекты культурного наследия,
- Экология,
- Государственная собственность,
- Роспотребнадзор,
- Погребение и похоронное дело,
- Электроснабжение.

Ты должен выдавать ТОЛЬКО одно значение из этого списка наименований Тем:
- Дети и многодетные семьи,
- Оказание гос. соц. помощи,
- Нарушение правил очистки дорог от снега и наледи/Обращения о необходимости очистить тротуар от снега и наледи,
- Технические проблемы с записью на прием к врачу,
- Оказание медицинской помощи не в полном объеме/отказ в оказании медицинской помощи,
- Плата за вывоз ТКО,
- Ремонт дороги,
- Нехватка или сокращение врачей и медицинских учреждений,
- Жалобы на управляющие компании,
- Ненадлежащее качество или отсутствие отопления,
- Уборка/Вывоз мусора,
- Уборка территорий,
- Нарушение правил уборки от снега и наледи внутридворового проезда, тротуара, площади,
- Льготные лекарства,
- Содержание больниц,
- Благоустройство общественного пространства (парк, сквер, пешеходная зона, бульвар, набережная, центральная улица или площадь)

"""

messages = []
#messages.append({"role": "system", "content": system_text})
messages.append({"role": "system", "content": prompt})

response_big = openai.chat.completions.create(
    model="openai/gpt-4-1106-preview",
    messages=messages,
    temperature=0.5,
    n=1,
    max_tokens=int(len(prompt) * 1.5),
)

#print("Response BIG:",response_big)
response = response_big.choices[0].message.content
print("Response:",response)

messages = []
messages.append({"role": "system", "content": prompt})
messages.append({"role": "user", "content": "Я шла по улице Строителей вчера и упала в яму около дома номер 34. Мэр, сделайте что-нибудь. Если бы я была ребенком, было бы намного хуже"})

response_big = openai.chat.completions.create(
    model="openai/gpt-4-1106-preview",
    messages=messages,
    temperature=0.5,
    n=1,
    max_tokens=int(len(prompt) * 1.5),
)

#print("Response BIG:",response_big)
response = []
response = response_big.choices[0].message.content
print("Response:",response, type(response), sep='\n')